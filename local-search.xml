<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Ceisum实现铁路仿真</title>
    <link href="/2021/01/03/Ceisum%E5%AE%9E%E7%8E%B0%E9%93%81%E8%B7%AF%E4%BB%BF%E7%9C%9F/"/>
    <url>/2021/01/03/Ceisum%E5%AE%9E%E7%8E%B0%E9%93%81%E8%B7%AF%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="铁路模拟仿真实现"><a href="#铁路模拟仿真实现" class="headerlink" title="铁路模拟仿真实现"></a>铁路模拟仿真实现</h1><p>实现效果</p><p><img src="https://cdn.jsdelivr.net/gh/emhui/oss@master/uPic/lxieypx;.gif" alt="train"></p><p>内容比较多，只讲部分内容，可能有点乱。可以参考一下代码，有不懂的欢迎提问</p><h1 id="初始化变量"><a href="#初始化变量" class="headerlink" title="初始化变量"></a>初始化变量</h1><p>这些变量下面都会用到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 运动车厢的速度</span><br><span class="hljs-keyword">let</span> velocity = <span class="hljs-number">30</span> <span class="hljs-comment">// 速度,根据他来计算到达各个点的时间</span><br><span class="hljs-comment">// 当前目标点的位置</span><br><span class="hljs-comment">// var currentIndex = 1</span><br><br><span class="hljs-comment">// 每节车厢相对上一节车厢延时一定时间到达同一个位置</span><br><span class="hljs-keyword">var</span> delayTime = <span class="hljs-number">13</span><br><br><span class="hljs-comment">// 存储所有运动中的实体对象</span><br><span class="hljs-keyword">var</span> dynamicEntities = []<br><br><span class="hljs-comment">// 运动模型数量</span><br><span class="hljs-keyword">var</span> dynamicNum = <span class="hljs-number">5</span><br><br><span class="hljs-comment">// 每节铁轨的长度，用于计算两个点之前铺设多少节铁轨</span><br><span class="hljs-keyword">var</span> modelLength = <span class="hljs-number">170</span><br><br><span class="hljs-comment">// 初始化dynamicEntitye</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; dynamicNum ; ++i) &#123;<br>    <span class="hljs-keyword">let</span> obj = &#123;<br>        entity: <span class="hljs-literal">null</span>, <span class="hljs-comment">// 实体对象</span><br>        property: <span class="hljs-keyword">new</span> Cesium.SampledPositionProperty(), <span class="hljs-comment">// 动态位置属性</span><br>        timeAndOrientationList: [],<br>        startTime: <span class="hljs-number">0</span>,<br>        endTime: <span class="hljs-number">0</span><br>    &#125;<br>    dynamicEntities.push(obj)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="加载线路并获取位置"><a href="#加载线路并获取位置" class="headerlink" title="加载线路并获取位置"></a>加载线路并获取位置</h1><p>我们需要有一系列点路径坐标（火车运行的路径）。这里我从Google Eearth中绘制了一条线，然后导出为KML数据加载进来。</p><p><img src="https://cdn.jsdelivr.net/gh/emhui/oss@master/uPic/7MbzTG.png" alt="Google earth"></p><p>通过加载的这条路径，我们需要获取路径中每个转折点的坐标信息。通过这些转折点，我们可以完成<strong>设置铁轨位置</strong>和<strong>计算出模型实体每个时间点对应点位置</strong></p><p><strong>加载KML</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">// 初始化路径 设置带时间的路径</span><br>viewer.dataSources.add(Cesium.KmlDataSource.load(routerUrl,<br>    &#123;<br>        camera: viewer.scene.camera,<br>        canvas: viewer.scene.canvas,<br>        clampToGround: <span class="hljs-literal">true</span><br>    &#125;)<br>).then(<span class="hljs-function"><span class="hljs-params">dataSource</span> =&gt;</span> &#123;<br><span class="hljs-comment">// ... 加载好后获取改路径点坐标数组</span><br>    <span class="hljs-keyword">var</span> router = dataSource.entities.getById(<span class="hljs-string">&#x27;0129AA13ED12D2857AD0&#x27;</span>);<br>    <span class="hljs-keyword">var</span> positions = router.polyline.positions._value<br>    viewer.flyTo(router)<br>    <span class="hljs-comment">// createDynamicPositions(positions) // 计算带时间的路径</span><br>    <span class="hljs-comment">// createDynamicEntity() // 根据动态路径创建模型实体</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>首先我们加载好路线后，就要获取改路线的坐标数组（每个转折点或顶点的位置）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取路径对象</span><br><span class="hljs-keyword">var</span> router = dataSource.entities.getById(<span class="hljs-string">&#x27;0129AA13ED12D2857AD0&#x27;</span>);<br><span class="hljs-comment">// 获取对象中的坐标数组</span><br><span class="hljs-keyword">var</span> positions = router.polyline.positions._value<br></code></pre></td></tr></table></figure><p>我们可以看一下这些数组的内容</p><p><img src="https://cdn.jsdelivr.net/gh/emhui/oss@master/uPic/IoR5O3.png" alt="IoR5O3"></p><p>在这里可以看出来，这些坐标全是笛卡尔类型。同时可以知道我们总共有13个转折点</p><p>接下来两章是重点</p><h1 id="加载铁轨"><a href="#加载铁轨" class="headerlink" title="加载铁轨"></a>加载铁轨</h1><p>效果展示</p><p><img src="https://cdn.jsdelivr.net/gh/emhui/oss@master/uPic/Kkx93r.png" alt="Kkx93r"></p><p>实现上面效果，这里我们需要做下面几步。</p><ul><li>计算每段路（两个点）之间的距离S</li><li>设置每个铁轨的固定长度L</li><li>计算每段路可以铺设多少个模型 num = S / L</li><li>通过每段路两端的点的坐标，计算出这段中每个铁轨模型的位置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">// 这个是每个模型的长度，在一开始的时候就定义了</span><br><span class="hljs-comment">// var modelLength = 170</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">repeateModel</span>(<span class="hljs-params">posCart1, posCart2</span>) </span>&#123;<br>    <span class="hljs-comment">// 需要摆放模型的数量</span><br>    <span class="hljs-comment">// 模型的数量 = 两个点之间的长度 / 每个模型的长度</span><br>    <span class="hljs-keyword">let</span> modelNum = <span class="hljs-built_in">parseInt</span>(computeDistance(posCart1, posCart2) / modelLength)<br>    <span class="hljs-comment">// 根据两个点的经纬度调整每个模型的方向</span><br>    <span class="hljs-keyword">let</span> heading = computeOrientation(posCart1, posCart2)<br>    <span class="hljs-comment">// 开始计算每个模型的位置</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt; modelNum; ++i) &#123;<br>    <span class="hljs-comment">// 求第i个点的位置。下面有介绍为什么这样写</span><br>        <span class="hljs-keyword">var</span> mid = <span class="hljs-keyword">new</span> Cesium.Cartesian3()<br>        Cesium.Cartesian3.add(<br>            Cesium.Cartesian3.multiplyByScalar(posCart1, i / modelNum, <span class="hljs-keyword">new</span> Cesium.Cartesian3()),<br>            Cesium.Cartesian3.multiplyByScalar(posCart2, (modelNum - i) / modelNum, <span class="hljs-keyword">new</span> Cesium.Cartesian3()),<br>            mid<br>        )<br><span class="hljs-comment">// 计算出位置后，添加铁轨模型到Viewer中。同时调整模型的方向</span><br>        viewer.entities.add(&#123;<br>            position: mid,<br>            model: &#123;<br>                uri: modelRailwayUrl,<br>                scale: <span class="hljs-number">0.025</span><br>            &#125;,<br>            orientation: changeOrientation(mid, heading)<br>        &#125;)<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>两个坐标之前第i的位置如何求</strong></p><p>先看一下下面的一道数学题</p><p><img src="https://cdn.jsdelivr.net/gh/emhui/oss@master/uPic/bJgWdB.png" alt="bJgWdB"></p><p>通过这道题，我们就可以写出下面代码，求出第i个点的位置了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Cesium.Cartesian3.add(<br>    Cesium.Cartesian3.multiplyByScalar(posCart1, i / modelNum, <span class="hljs-keyword">new</span> Cesium.Cartesian3()),<br>    Cesium.Cartesian3.multiplyByScalar(posCart2, (modelNum - i) / modelNum, <span class="hljs-keyword">new</span> Cesium.Cartesian3()),<br>    mid<br>)<br></code></pre></td></tr></table></figure><p><strong>模型方向问题</strong></p><p>在上面代码中。我们经常要用到一个计算模型方向和改变模型方向的函数，那么为什么要计算模型的方向呢？</p><p>我们打开铁轨模型和系统自带的一些模型。看看他们的方向</p><p>使用下面命令调出查看方向的小工具</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">viewer.extend(Cesium.viewerCesiumInspectorMixin);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/emhui/oss@master/uPic/EUBOGy.png" alt="EUBOGy"></p><p>可以看到，我们的模型的方向默认位置是朝向南方（红色是东方，绿色是北方）。而官网的模型方向默认是东方。根据官方对模型的描述</p><blockquote><p>By default, the model is oriented upright and facing east. Control the orientation of the model by specifying a Quaternion for the Entity.orientation property. This controls the heading, pitch, and roll of the model.</p></blockquote><p>可以看到，我们的模型方向是有问题。因此需要手动纠正。查阅很多方法，无法从模型本身入手。所以只能通过代码的方式来纠正方向。大概的思路是先计算出两个点的方向，然后在向东方偏移90度左右即可。</p><p><strong>计算方向函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">computeOrientation</span>(<span class="hljs-params">posCart1, posCart2</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> heading = bearing(<br>        Cesium.Cartographic.fromCartesian(posCart1).latitude,<br>        Cesium.Cartographic.fromCartesian(posCart1).longitude,<br>        Cesium.Cartographic.fromCartesian(posCart2).latitude,<br>        Cesium.Cartographic.fromCartesian(posCart2).longitude<br>    )<br>    <span class="hljs-keyword">return</span> heading<br>&#125;<br>        <span class="hljs-comment">// 计算两点之间的方向</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bearing</span>(<span class="hljs-params">startLat, startLng, destLat, destLng</span>) </span>&#123;<br>    startLat = Cesium.Math.toRadians(startLat);<br>    startLng = Cesium.Math.toRadians(startLng);<br>    destLat = Cesium.Math.toRadians(destLat);<br>    destLng = Cesium.Math.toRadians(destLng);<br><br>    <span class="hljs-keyword">let</span> y = <span class="hljs-built_in">Math</span>.sin(destLng - startLng) * <span class="hljs-built_in">Math</span>.cos(destLat);<br>    <span class="hljs-keyword">let</span> x = <span class="hljs-built_in">Math</span>.cos(startLat) * <span class="hljs-built_in">Math</span>.sin(destLat) - <span class="hljs-built_in">Math</span>.sin(startLat) * <span class="hljs-built_in">Math</span>.cos(destLat) * <span class="hljs-built_in">Math</span>.cos(destLng - startLng);<br>    <span class="hljs-keyword">let</span> brng = <span class="hljs-built_in">Math</span>.atan2(y, x);<br>    <span class="hljs-keyword">let</span> brngDgr = Cesium.Math.toDegrees(brng);<br>    <span class="hljs-keyword">return</span> (brngDgr + <span class="hljs-number">360</span>) % <span class="hljs-number">360</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>改变模型的位置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeOrientation</span>(<span class="hljs-params">position, degree</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> heading = Cesium.Math.toRadians(degree);<br>    <span class="hljs-keyword">var</span> pitch = Cesium.Math.toRadians(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-keyword">var</span> roll = Cesium.Math.toRadians(<span class="hljs-number">0.0</span>);<br>    <span class="hljs-keyword">var</span> orientation = Cesium.Transforms.headingPitchRollQuaternion(position, <span class="hljs-keyword">new</span> Cesium.HeadingPitchRoll(heading, pitch, roll));<br>    <span class="hljs-keyword">return</span> orientation<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="加载运动的车头和车厢"><a href="#加载运动的车头和车厢" class="headerlink" title="加载运动的车头和车厢"></a>加载运动的车头和车厢</h1><p>这里我们需要了解一个知识。<a href="https://www.jianshu.com/p/f0b47997224c">Cesium的Property机制总结</a>.<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Cesium的Property机制总结">[1]</span></a></sup>这篇文章中，我们可以看到一个属性<code>SampledPositionProperty</code>,它可以使用物体的运动。</p><p><img src="https://upload-images.jianshu.io/upload_images/80648-366b91d38f419afa.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/296/format/webp" alt="move"></p><p>它的实现代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> property = <span class="hljs-keyword">new</span> Cesium.SampledPositionProperty();<br><br>property.addSample(Cesium.JulianDate.fromIso8601(<span class="hljs-string">&#x27;2019-01-01T00:00:00.00Z&#x27;</span>),<br>    Cesium.Cartesian3.fromDegrees(-<span class="hljs-number">114.0</span>, <span class="hljs-number">40.0</span>, <span class="hljs-number">300000.0</span>));<br><br>property.addSample(Cesium.JulianDate.fromIso8601(<span class="hljs-string">&#x27;2019-01-03T00:00:00.00Z&#x27;</span>),<br>    Cesium.Cartesian3.fromDegrees(-<span class="hljs-number">114.0</span>, <span class="hljs-number">45.0</span>, <span class="hljs-number">300000.0</span>));<br><br>blueBox.position = property;<br></code></pre></td></tr></table></figure><p>它的原理是，Entity在不同的时间运动到不同的位置。因此我们的火车运动也是一样，在不同的时候运动到不同的位置即可。那么如何实现呢？</p><p>还是通过之前获取的铁轨路径数组，再计算到达每个转折点的时间。构成一个如下图所示的数据结构。</p><p><img src="https://cdn.jsdelivr.net/gh/emhui/oss@master/uPic/XzFZ1f.png" alt="XzFZ1f"></p><p>如何让模型运动起来也可以总结为下面这张图</p><p><img src="https://cdn.jsdelivr.net/gh/emhui/oss@master/uPic/Eg6FPk.png" alt="Eg6FPk"></p><p>比如4点的时候在position1位置，4.30的时候在position2位置。4.50的时候在position3位置。</p><p>那么现在时间点应该如何计算</p><p>我们设置一个速度变量V，然后计算两点的距离S。那么到达下一个的时间就是</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">time</span> = S / V<br></code></pre></td></tr></table></figure><p>因此实现代码如下（伪代码）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 计算到下一个坐标所花费的时间</span><br><span class="hljs-keyword">let</span> time2Next = computeTime(datas[index], datas[index + <span class="hljs-number">1</span>])<br><span class="hljs-comment">// 计算到达改点的时刻</span><br><span class="hljs-keyword">let</span> time = totalTime + time2Next<br><span class="hljs-comment">// 将时刻+位置信息写入到模型的位置变量中</span><br>dynamicEntity.property.addSample(<br>    Cesium.JulianDate.addSeconds(start, time, <span class="hljs-keyword">new</span> Cesium.JulianDate()),<br>    position<br>)<br><span class="hljs-comment">// 计算总花费时间</span><br>totalTime += time2Next<br><br></code></pre></td></tr></table></figure><p>这里又有新的问题。</p><p>我们需要好几节车厢一起运动，如何实现呢？</p><p>使用延时启动，就是每一个车厢到达一个转折点的时间都比上一节车厢晚一段时间。如下图所示，不同的车厢在不同的时间点的位置不一样。</p><p><img src="https://cdn.jsdelivr.net/gh/emhui/oss@master/uPic/Lp33qj.png" alt="Lp33qj"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> time = totalTime + delayTime * i<br></code></pre></td></tr></table></figure><p>我们看一下实现效果,车厢是一节在一节的后面出现的</p><p><img src="https://cdn.jsdelivr.net/gh/emhui/oss@master/uPic/lxiemjmjiuxm.gif" alt="train"></p><p>通过代码实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createDynamicPositions</span>(<span class="hljs-params">positions</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> length = positions.length<br>    <span class="hljs-keyword">var</span> totalTime = <span class="hljs-number">0</span><span class="hljs-comment">// 跑完全部路程的时间</span><br>    <span class="hljs-comment">// 遍历铁轨路径的每个转折点</span><br>    positions.forEach(<span class="hljs-function">(<span class="hljs-params">position, index, datas</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 在每个路径转角处创建一个Point对象</span><br>        CreatePoint(position, index)<br>        <span class="hljs-keyword">if</span> (index + <span class="hljs-number">1</span> &lt; length) &#123;<br>            <span class="hljs-comment">// 计算一个点到另一点需要到时间</span><br>            <span class="hljs-keyword">let</span> time2Next = computeTime(datas[index], datas[index + <span class="hljs-number">1</span>])<br>            <span class="hljs-comment">// 计算两个转角点的方向</span><br>            <span class="hljs-keyword">let</span> orientation = computeOrientation(datas[index], datas[index + <span class="hljs-number">1</span>])<br>            <span class="hljs-comment">// 为每个车厢模型设置 时间+位置</span><br>            dynamicEntities.forEach(<span class="hljs-function">(<span class="hljs-params">dynamicEntity, i</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">// 这里实现了 每个模型都相对于之前都个模型延时一定时间进行启动</span><br>                <span class="hljs-keyword">let</span> time = totalTime + delayTime * i<br>                dynamicEntity.property.addSample(<br>                    Cesium.JulianDate.addSeconds(start, time, <span class="hljs-keyword">new</span> Cesium.JulianDate()),<br>                    position<br>                )<br>                <span class="hljs-comment">// 记录每个模型分别达到一个点的时间、方向、位置</span><br>                <span class="hljs-keyword">let</span> obj = &#123;<br>                    time: totalTime, <span class="hljs-comment">// 到达下一个点需要耗费的时间,它是一个数值，不是一个时间点</span><br>                    position: position,<br>                    orientation: orientation<br>                &#125;<br><br>                <span class="hljs-comment">// 计算开始时间</span><br>                <span class="hljs-keyword">if</span> (index === <span class="hljs-number">0</span>) &#123;<br>                    dynamicEntity.startTime = Cesium.JulianDate.addSeconds(start, time, <span class="hljs-keyword">new</span> Cesium.JulianDate())<br>                &#125;<br><br>                <span class="hljs-comment">// 计算最后一个时间</span><br>                <span class="hljs-keyword">if</span> (index + <span class="hljs-number">2</span> === length) &#123;<br>                    dynamicEntity.endTime = Cesium.JulianDate.addSeconds(start, time, <span class="hljs-keyword">new</span> Cesium.JulianDate())<br>                &#125;<br>                <span class="hljs-comment">// 将计算得到的 时间+位置 属性存储到每个实体中</span><br>                dynamicEntity.timeAndOrientationList.push(obj)<br><br>            &#125;)<br><br>            totalTime += time2Next<br><br>        &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure><p>这里我们发现我们也计算了每个模型的方向，为什么要计算方向呢？在上面设置铁轨的时候讲到了，因为我们的模型方向默认是有点问题的。默认朝向南方，因此需要手动调整方向，我们需要自己写一个方法，判断到了转角处进行转向。（如果是模型默认朝向东方的话，则不需要使用该方法，直接使用自带的一种方法，具体方法后面再谈）</p><p>如何实现到了转角处自动转向呢？我们在刚刚上一步的时候记录了每个模型到达某个位置的时候是在是什么时间点。因此只需要判断，当前模型运行的时间是否到了转角的时间点，到了的话就开始转向，而这个方向我们同时也在上一步的时候存储到每个实体中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>    time: totalTime, <span class="hljs-comment">// 到达下一个点需要耗费的时间,它是一个数值，不是一个时间点</span><br>    position: position,<br>    orientation: orientation<br>&#125;<br></code></pre></td></tr></table></figure><p>监听当前时间点并转向的代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">viewer.clock.onTick.addEventListener(<span class="hljs-function">(<span class="hljs-params">clock</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// 判断每个运动的模型当前是否到了转向时间</span><br>    dynamicEntities.forEach(<span class="hljs-function"><span class="hljs-params">dynamicEntity</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 计算每个运动的模型与模型的开始时间差</span><br>        <span class="hljs-keyword">let</span> timeOffset = Cesium.JulianDate.secondsDifference(clock.currentTime, dynamicEntity.startTime);<br>        <span class="hljs-comment">// 判断是否达到转向的时间点</span><br>        dynamicEntity.timeAndOrientationList.forEach(<span class="hljs-function">(<span class="hljs-params">obj, index, array</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (timeOffset &gt;= obj.time &amp;&amp; timeOffset &lt;= array[index + <span class="hljs-number">1</span>].time) &#123;<br>                <span class="hljs-comment">// 177在第一条铁轨是一个好的角度</span><br>                dynamicEntity.entity.orientation = changeOrientation(obj.position, obj.orientation + <span class="hljs-number">180</span>)<br>            &#125;<br>        &#125;)<br>    &#125;)<br></code></pre></td></tr></table></figure><p>如果模型的方向是正确的，只需要在创建模型实体对象的时候，指定该属性即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">orientation: <span class="hljs-keyword">new</span> Cesium.VelocityOrientationProperty(dynamicEntity.property),<br></code></pre></td></tr></table></figure><p>目前还有下面问题暂时无法解决</p><ul><li>各个模型之间的衔接不好</li></ul><blockquote><p>经过测试如果模型的方向是正确的话，那么就可以解决这个问题。所以可以从模型入手，更改模型的默认方向，使它默认朝向东方，但是自己一直没有找到如何编辑GLB模型。所以暂时无解。</p></blockquote><section class="footnotes"><h2>参考</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.jianshu.com/p/f0b47997224c">Cesium的Property机制总结</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Cesium</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cesium</tag>
      
      <tag>JavaScript</tag>
      
      <tag>铁路</tag>
      
      <tag>仿真</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo注意事项</title>
    <link href="/2021/01/03/hexo%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2021/01/03/hexo%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<p><code>hexo clean &amp;&amp; hexo d</code></p><p><del>如果使用这个命令，可能会清除<strong>CNAME</strong>文件</del></p><p>保持永久域名的方法</p><p>在<code>/source</code>目录下面建立一个文件<code>CNAME</code>,然后填入你的域名即可。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="脚注">[1]</span></a></sup></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><h2>参考</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.fluid-dev.com/docs/guide/#%E8%84%9A%E6%B3%A8">脚注</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>域名</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我和你，心连心，共度地球村</title>
    <link href="/2021/01/03/%E6%88%91%E5%92%8C%E4%BD%A0%EF%BC%8C%E5%BF%83%E8%BF%9E%E5%BF%83%EF%BC%8C%E5%85%B1%E5%BA%A6%E5%9C%B0%E7%90%83%E6%9D%91/"/>
    <url>/2021/01/03/%E6%88%91%E5%92%8C%E4%BD%A0%EF%BC%8C%E5%BF%83%E8%BF%9E%E5%BF%83%EF%BC%8C%E5%85%B1%E5%BA%A6%E5%9C%B0%E7%90%83%E6%9D%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>阿珍爱上了阿强</title>
    <link href="/2021/01/03/%E9%98%BF%E7%8F%8D%E7%88%B1%E4%B8%8A%E4%BA%86%E9%98%BF%E5%BC%BA/"/>
    <url>/2021/01/03/%E9%98%BF%E7%8F%8D%E7%88%B1%E4%B8%8A%E4%BA%86%E9%98%BF%E5%BC%BA/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2021 fire</title>
    <link href="/2021/01/03/2021-fire/"/>
    <url>/2021/01/03/2021-fire/</url>
    
    <content type="html"><![CDATA[<p>阿珍爱上了阿强，让生活变得更美丽。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第一篇测试</title>
    <link href="/2020/11/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95/"/>
    <url>/2020/11/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/11/12/hello-world/"/>
    <url>/2020/11/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
